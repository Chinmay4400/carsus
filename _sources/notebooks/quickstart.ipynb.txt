{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quickstart\n",
    "\n",
    "This notebook provides a quick introduction in how to use Carsus.\n",
    "\n",
    "## Prerequisites:\n",
    "- Install carsus (preferably as a git repository)\n",
    "- Install ChiantiPy (from source or pip, both versions work)\n",
    "- Install chiantipy and set the environmentvariable `XUVTOP = /path/to/chianti/root`\n",
    "- We highly recommend installing the `carsus-db` repository as it includes the files of several sources that cannot easily be downloaded."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a database\n",
    "\n",
    "To start working with a database you need to initialize it. This requires a url, for example `sqlite:///path/to/example.db`. In this quickstart, we'll use a in-memory sqlite database, so we leave the url empty:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initializing the database at sqlite://\n",
      "Ingesting basic atomic data\n"
     ]
    }
   ],
   "source": [
    "from carsus import init_db\n",
    "session = init_db()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we have a SQLAlchemy `Session` object named `session`. We can use `session` to make simple queries. As you can see from the output, \"basic atomic data\" has been ingested into our database. Let's examine it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Atoms in the database: 118\n",
      "Symbol: Si, atomic_number: 14, name: Silicon\n"
     ]
    }
   ],
   "source": [
    "from carsus.model import Atom\n",
    "print('Number of Atoms in the database: {}'.format(session.query(Atom).count()))\n",
    "si = session.query(Atom).get(14) \n",
    "print(\"Symbol: {}, atomic_number: {}, name: {}\".format(si.symbol, si.atomic_number, si.name))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, our database already contains basic information about atoms. But this informaition has not been commited to the database yet. It is always **your** responsibility to commit data!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To store more interesting data we are going to use ingesters. For each data source supported by Carsus there is a corresponding ingester class. For example, let's ingest atomic weights from the NIST Atomic Weights and Isotopic Compositions database:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " found PyQt4 widgets\n",
      " using PyQt4 widgets\n",
      "Downloading data from the NIST Atomic Weights and Isotopic Compositions database.\n",
      "Ingesting atomic weights from nist\n"
     ]
    }
   ],
   "source": [
    "from carsus.io import NISTWeightsCompIngester\n",
    "weightscomp_ingester = NISTWeightsCompIngester(session)\n",
    "weightscomp_ingester.ingest()\n",
    "session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And now atoms have atomic weights:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<Quantity: 28.085 u>]\n"
     ]
    }
   ],
   "source": [
    "print si.weights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Other ingesters are just the same, but they often take specific arguments:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading ionization energies from the NIST Atomic Spectra Database\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/media/data/projects/tardis/carsus/carsus/io/nist/ionization.py:88: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support skipfooter; you can avoid this warning by specifying engine='python'.\n",
      "  usecols=range(5), names=column_names, skiprows=3, skipfooter=1)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingesting ionization energies from nist-asd\n",
      "Ingesting ground levels from nist-asd\n",
      "Ingesting levels from ku_latest\n",
      "Ingesting levels for Si 1\n",
      "Ingesting levels for Si 2\n",
      "Ingesting lines from ku_latest\n",
      "Ingesting lines for Si 1\n",
      "Ingesting lines for Si 2\n"
     ]
    }
   ],
   "source": [
    "from carsus.io import GFALLIngester, NISTIonizationEnergiesIngester\n",
    "\n",
    "# Ingest ionization energies and ground levels from the NIST Atomic Spectra Database\n",
    "ioniz_energies_ingester = NISTIonizationEnergiesIngester(session, spectra=\"Si\")\n",
    "ioniz_energies_ingester.ingest(ionization_energies=True, ground_levels=True)\n",
    "\n",
    "# Ingest levels and lines from the Kurucz Database\n",
    "gfall_ingester = GFALLIngester(session, fname=\"gfall.dat\", ions=\"Si 1-2\")\n",
    "gfall_ingester.ingest(levels=True, lines=True)\n",
    "session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have ionization energies, levels and lines for ions of Si (Note: Si 1 = Si II, Si 2 = Si III, etc.). You should **always** use Arabic numerals when specifying ions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "166\n"
     ]
    }
   ],
   "source": [
    "from carsus.model import Ion\n",
    "si_1 = session.query(Ion).get((14,1))\n",
    "print len(si_1.levels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is it! Now you can explore the data you have in your database or create output hdf files."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating output HDFStores\n",
    "\n",
    "Once you have a database it is very easy to create atomic data files for TARDIS. \n",
    "To do this you need to use a special class called `AtomData`. The class takes `session` as its first argument; other important parameters are `selected_atoms` and `chianti_ions`. Only data for `selected_atoms` will be stored in the output DataFrames and levels and lines for `chianti_ions` will be taken from the data source with the same name. Let's create an `AtomData` instance: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from carsus.io import AtomData\n",
    "atom_data = AtomData(session, selected_atoms=\"Si\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The output DataFrames can be easily accessed as \"prepared\" attributes of `atom_data`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              symbol     name    mass\n",
      "atomic_number                        \n",
      "14                Si  Silicon  28.085\n"
     ]
    }
   ],
   "source": [
    "print atom_data.atom_masses_prepared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    atomic_number  ion_number  level_number    energy  g  metastable\n",
      "0              14           0             0  0.000000  1        True\n",
      "1              14           1             0  0.000000  2        True\n",
      "2              14           1             1  0.035613  4        True\n",
      "3              14           1             2  5.309535  2        True\n",
      "4              14           1             3  5.322966  4        True\n",
      "5              14           1             4  5.344699  6        True\n",
      "6              14           1             5  6.857485  4       False\n",
      "7              14           1             6  6.859448  6       False\n",
      "8              14           1             7  8.121023  2       False\n",
      "9              14           1             8  9.505292  2       False\n",
      "10             14           1             9  9.836720  4       False\n"
     ]
    }
   ],
   "source": [
    "print atom_data.levels_prepared.loc[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    atomic_number  ion_number  source_level_number  destination_level_number  \\\n",
      "0              14           1                    0                        71   \n",
      "1              14           1                    0                        66   \n",
      "2              14           1                    0                        57   \n",
      "3              14           1                    0                        56   \n",
      "4              14           1                    0                        46   \n",
      "5              14           1                    0                        45   \n",
      "6              14           1                    0                        30   \n",
      "7              14           1                    0                        29   \n",
      "8              14           1                    0                        21   \n",
      "9              14           1                    0                        20   \n",
      "10             14           1                    0                        18   \n",
      "\n",
      "    transition_type  transition_probability  transition_line_id  \n",
      "0                 1                     0.0                   9  \n",
      "1                 1                     0.0                  10  \n",
      "2                 1                     0.0                  14  \n",
      "3                 1                     0.0                  19  \n",
      "4                 1                     0.0                  24  \n",
      "5                 1                     0.0                  27  \n",
      "6                 1                     0.0                  29  \n",
      "7                 1                     0.0                  32  \n",
      "8                 1                     0.0                  56  \n",
      "9                 1                     0.0                  62  \n",
      "10                1                     0.0                  76  \n"
     ]
    }
   ],
   "source": [
    "print atom_data.macro_atom_prepared.loc[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To create an HDFStore you need to use the `to_hdf()` method. You should specify every DataFrame that you want to be stored:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signing AtomData with MD5 and UUID1\n"
     ]
    }
   ],
   "source": [
    "atom_data.to_hdf(\"example_store.h5\", store_atom_masses=True, store_ionization_energies=True, \n",
    "                store_levels=True, store_lines=True, store_macro_atom=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are done! Now you can use the created HDFStore to run TARDIS simulations."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
