{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating the tardis_example database\n",
    "\n",
    "This notebook provides a quick introduction in how to use Carsus.\n",
    "\n",
    "## Prerequisites:\n",
    "- Install carsus (preferably as a git repository)\n",
    "- Install ChiantiPy (from source or pip, both versions work)\n",
    "- Install chiantipy and set the environmentvariable `XUVTOP = /path/to/chianti/root`\n",
    "- We highly recommend installing the `carsus-db` repository as it includes the files of several sources that cannot easily be downloaded."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports and initialization:\n",
    "\n",
    "Import all the essential ingesters and initialize the session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " found PyQt4 widgets\n",
      " using PyQt4 widgets\n",
      "Initializing the database at sqlite:////tmp/carsus_example.db\n",
      "Ingesting basic atomic data\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from carsus import init_db\n",
    "from carsus.io.nist import (\n",
    "        NISTWeightsCompIngester,\n",
    "        NISTIonizationEnergiesIngester\n",
    "        )\n",
    "from carsus.io.kurucz import GFALLIngester\n",
    "from carsus.io.chianti_ import ChiantiIngester\n",
    "from carsus.io.zeta import KnoxLongZetaIngester\n",
    "from carsus.io.output import AtomData\n",
    "\n",
    "\n",
    "DB_ROOT = '/media/data/projects/tardis/carsus-db/'\n",
    "session = init_db('sqlite:////tmp/carsus_example.db')\n",
    "#session = init_db('sqlite:///' + os.path.join(DB_ROOT, 'carsus_example.db'))\n",
    "storename = os.path.join(DB_ROOT, 'kurucz_chianti_H_He.h5')\n",
    "storename = '/tmp/carsus_example.h5'\n",
    "zeta_fname = os.path.join(DB_ROOT, 'zeta/knox_long_recombination_zeta.dat')\n",
    "gfall_fname = os.path.join(DB_ROOT, 'gfall/gfall_old.dat')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ingesting data\n",
    "\n",
    "\n",
    "### Weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from the NIST Atomic Weights and Isotopic Compositions database.\n",
      "Ingesting atomic weights from nist\n"
     ]
    }
   ],
   "source": [
    "weightscomp_ingester = NISTWeightsCompIngester(session)\n",
    "weightscomp_ingester.ingest()\n",
    "session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have all the weights ingested.\n",
    "\n",
    "### Ionization Energies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading ionization energies from the NIST Atomic Spectra Database\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/media/data/projects/tardis/carsus/carsus/io/nist/ionization.py:88: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support skipfooter; you can avoid this warning by specifying engine='python'.\n",
      "  usecols=range(5), names=column_names, skiprows=3, skipfooter=1)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingesting ionization energies from nist-asd\n",
      "Ingesting ground levels from nist-asd\n"
     ]
    }
   ],
   "source": [
    "ioniz_energies_ingester = NISTIonizationEnergiesIngester(\n",
    "            session,\n",
    "            spectra=\"h-zn\"\n",
    "            )\n",
    "ioniz_energies_ingester.ingest(\n",
    "            ionization_energies=True,\n",
    "            ground_levels=True\n",
    "            )\n",
    "session.commit()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ingesting kurucz levels and lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingesting levels from ku_latest\n",
      "Ingesting levels for He 0\n",
      "Ingesting levels for He 1\n",
      "Ingesting levels for Li 0\n",
      "Ingesting levels for Li 1\n",
      "Ingesting levels for Be 0\n",
      "Ingesting levels for Be 1\n",
      "Ingesting levels for Be 2\n",
      "Ingesting levels for B 0\n",
      "Ingesting levels for B 1\n",
      "Ingesting levels for B 2\n",
      "Ingesting levels for B 3\n",
      "Ingesting levels for C 0\n",
      "Ingesting levels for C 1\n",
      "Ingesting levels for C 2\n",
      "Ingesting levels for C 3\n",
      "Ingesting levels for N 0\n",
      "Ingesting levels for N 1\n",
      "Ingesting levels for N 2\n",
      "Ingesting levels for N 3\n",
      "Ingesting levels for N 4\n",
      "Ingesting levels for N 5\n",
      "Ingesting levels for O 0\n",
      "Ingesting levels for O 1\n",
      "Ingesting levels for O 2\n",
      "Ingesting levels for O 3\n",
      "Ingesting levels for O 4\n",
      "Ingesting levels for O 5\n",
      "Ingesting levels for F 0\n",
      "Ingesting levels for F 1\n",
      "Ingesting levels for F 2\n",
      "Ingesting levels for F 3\n",
      "Ingesting levels for F 4\n",
      "Ingesting levels for F 5\n",
      "Ingesting levels for Ne 0\n",
      "Ingesting levels for Ne 1\n",
      "Ingesting levels for Ne 2\n",
      "Ingesting levels for Ne 3\n",
      "Ingesting levels for Ne 4\n",
      "Ingesting levels for Ne 5\n",
      "Ingesting levels for Na 0\n",
      "Ingesting levels for Na 1\n",
      "Ingesting levels for Na 2\n",
      "Ingesting levels for Na 3\n",
      "Ingesting levels for Na 4\n",
      "Ingesting levels for Na 5\n",
      "Ingesting levels for Mg 0\n",
      "Ingesting levels for Mg 1\n",
      "Ingesting levels for Mg 2\n",
      "Ingesting levels for Mg 3\n",
      "Ingesting levels for Mg 4\n",
      "Ingesting levels for Mg 5\n",
      "Ingesting levels for Al 0\n",
      "Ingesting levels for Al 1\n",
      "Ingesting levels for Al 2\n",
      "Ingesting levels for Al 3\n",
      "Ingesting levels for Al 4\n",
      "Ingesting levels for Al 5\n",
      "Ingesting levels for Si 0\n",
      "Ingesting levels for Si 1\n",
      "Ingesting levels for Si 2\n",
      "Ingesting levels for Si 3\n",
      "Ingesting levels for Si 4\n",
      "Ingesting levels for Si 5\n",
      "Ingesting levels for P 0\n",
      "Ingesting levels for P 1\n",
      "Ingesting levels for P 2\n",
      "Ingesting levels for P 3\n",
      "Ingesting levels for P 4\n",
      "Ingesting levels for P 5\n",
      "Ingesting levels for S 0\n",
      "Ingesting levels for S 1\n",
      "Ingesting levels for S 2\n",
      "Ingesting levels for S 3\n",
      "Ingesting levels for S 4\n",
      "Ingesting levels for S 5\n",
      "Ingesting levels for Cl 0\n",
      "Ingesting levels for Cl 1\n",
      "Ingesting levels for Cl 2\n",
      "Ingesting levels for Cl 3\n",
      "Ingesting levels for Cl 4\n",
      "Ingesting levels for Ar 0\n",
      "Ingesting levels for Ar 1\n",
      "Ingesting levels for Ar 2\n",
      "Ingesting levels for Ar 3\n",
      "Ingesting levels for Ar 4\n",
      "Ingesting levels for K 0\n",
      "Ingesting levels for K 1\n",
      "Ingesting levels for K 2\n",
      "Ingesting levels for K 3\n",
      "Ingesting levels for K 4\n",
      "Ingesting levels for Ca 0\n",
      "Ingesting levels for Ca 1\n",
      "Ingesting levels for Ca 2\n",
      "Ingesting levels for Ca 3\n",
      "Ingesting levels for Ca 4\n",
      "Ingesting levels for Ca 5\n",
      "Ingesting levels for Ca 6\n",
      "Ingesting levels for Ca 7\n",
      "Ingesting levels for Ca 8\n",
      "Ingesting levels for Sc 0\n",
      "Ingesting levels for Sc 1\n",
      "Ingesting levels for Sc 2\n",
      "Ingesting levels for Sc 3\n",
      "Ingesting levels for Sc 4\n",
      "Ingesting levels for Sc 5\n",
      "Ingesting levels for Sc 6\n",
      "Ingesting levels for Sc 7\n",
      "Ingesting levels for Sc 8\n",
      "Ingesting levels for Ti 0\n",
      "Ingesting levels for Ti 1\n",
      "Ingesting levels for Ti 2\n",
      "Ingesting levels for Ti 3\n",
      "Ingesting levels for Ti 4\n",
      "Ingesting levels for Ti 5\n",
      "Ingesting levels for Ti 6\n",
      "Ingesting levels for Ti 7\n",
      "Ingesting levels for Ti 8\n",
      "Ingesting levels for V 0\n",
      "Ingesting levels for V 1\n",
      "Ingesting levels for V 2\n",
      "Ingesting levels for V 3\n",
      "Ingesting levels for V 4\n",
      "Ingesting levels for V 5\n",
      "Ingesting levels for V 6\n",
      "Ingesting levels for V 7\n",
      "Ingesting levels for V 8\n",
      "Ingesting levels for Cr 0\n",
      "Ingesting levels for Cr 1\n",
      "Ingesting levels for Cr 2\n",
      "Ingesting levels for Cr 3\n",
      "Ingesting levels for Cr 4\n",
      "Ingesting levels for Cr 5\n",
      "Ingesting levels for Cr 6\n",
      "Ingesting levels for Cr 7\n",
      "Ingesting levels for Cr 8\n",
      "Ingesting levels for Mn 0\n",
      "Ingesting levels for Mn 1\n",
      "Ingesting levels for Mn 2\n",
      "Ingesting levels for Mn 3\n",
      "Ingesting levels for Mn 4\n",
      "Ingesting levels for Mn 5\n",
      "Ingesting levels for Mn 6\n",
      "Ingesting levels for Mn 7\n",
      "Ingesting levels for Mn 8\n",
      "Ingesting levels for Fe 0\n",
      "Ingesting levels for Fe 1\n",
      "Ingesting levels for Fe 2\n",
      "Ingesting levels for Fe 3\n",
      "Ingesting levels for Fe 4\n",
      "Ingesting levels for Fe 5\n",
      "Ingesting levels for Fe 6\n",
      "Ingesting levels for Fe 7\n",
      "Ingesting levels for Fe 8\n",
      "Ingesting levels for Co 0\n",
      "Ingesting levels for Co 1\n",
      "Ingesting levels for Co 2\n",
      "Ingesting levels for Co 3\n",
      "Ingesting levels for Co 4\n",
      "Ingesting levels for Co 5\n",
      "Ingesting levels for Co 6\n",
      "Ingesting levels for Co 7\n",
      "Ingesting levels for Co 8\n",
      "Ingesting levels for Ni 0\n",
      "Ingesting levels for Ni 1\n",
      "Ingesting levels for Ni 2\n",
      "Ingesting levels for Ni 3\n",
      "Ingesting levels for Ni 4\n",
      "Ingesting levels for Ni 5\n",
      "Ingesting levels for Ni 6\n",
      "Ingesting levels for Ni 7\n",
      "Ingesting levels for Ni 8\n",
      "Ingesting levels for Cu 0\n",
      "Ingesting levels for Cu 1\n",
      "Ingesting levels for Zn 0\n",
      "Ingesting levels for Zn 1\n",
      "Ingesting levels for Zn 2\n",
      "Ingesting lines from ku_latest\n",
      "Ingesting lines for He 0\n",
      "Ingesting lines for He 1\n",
      "Ingesting lines for Li 0\n",
      "Ingesting lines for Li 1\n",
      "Ingesting lines for Be 0\n",
      "Ingesting lines for Be 1\n",
      "Ingesting lines for Be 2\n",
      "Ingesting lines for B 0\n",
      "Ingesting lines for B 1\n",
      "Ingesting lines for B 2\n",
      "Ingesting lines for B 3\n",
      "Ingesting lines for C 0\n",
      "Ingesting lines for C 1\n",
      "Ingesting lines for C 2\n",
      "Ingesting lines for C 3\n",
      "Ingesting lines for N 0\n",
      "Ingesting lines for N 1\n",
      "Ingesting lines for N 2\n",
      "Ingesting lines for N 3\n",
      "Ingesting lines for N 4\n",
      "Ingesting lines for N 5\n",
      "Ingesting lines for O 0\n",
      "Ingesting lines for O 1\n",
      "Ingesting lines for O 2\n",
      "Ingesting lines for O 3\n",
      "Ingesting lines for O 4\n",
      "Ingesting lines for O 5\n",
      "Ingesting lines for F 0\n",
      "Ingesting lines for F 1\n",
      "Ingesting lines for F 2\n",
      "Ingesting lines for F 3\n",
      "Ingesting lines for F 4\n",
      "Ingesting lines for F 5\n",
      "Ingesting lines for Ne 0\n",
      "Ingesting lines for Ne 1\n",
      "Ingesting lines for Ne 2\n",
      "Ingesting lines for Ne 3\n",
      "Ingesting lines for Ne 4\n",
      "Ingesting lines for Ne 5\n",
      "Ingesting lines for Na 0\n",
      "Ingesting lines for Na 1\n",
      "Ingesting lines for Na 2\n",
      "Ingesting lines for Na 3\n",
      "Ingesting lines for Na 4\n",
      "Ingesting lines for Na 5\n",
      "Ingesting lines for Mg 0\n",
      "Ingesting lines for Mg 1\n",
      "Ingesting lines for Mg 2\n",
      "Ingesting lines for Mg 3\n",
      "Ingesting lines for Mg 4\n",
      "Ingesting lines for Mg 5\n",
      "Ingesting lines for Al 0\n",
      "Ingesting lines for Al 1\n",
      "Ingesting lines for Al 2\n",
      "Ingesting lines for Al 3\n",
      "Ingesting lines for Al 4\n",
      "Ingesting lines for Al 5\n",
      "Ingesting lines for Si 0\n",
      "Ingesting lines for Si 1\n",
      "Ingesting lines for Si 2\n",
      "Ingesting lines for Si 3\n",
      "Ingesting lines for Si 4\n",
      "Ingesting lines for Si 5\n",
      "Ingesting lines for P 0\n",
      "Ingesting lines for P 1\n",
      "Ingesting lines for P 2\n",
      "Ingesting lines for P 3\n",
      "Ingesting lines for P 4\n",
      "Ingesting lines for P 5\n",
      "Ingesting lines for S 0\n",
      "Ingesting lines for S 1\n",
      "Ingesting lines for S 2\n",
      "Ingesting lines for S 3\n",
      "Ingesting lines for S 4\n",
      "Ingesting lines for S 5\n",
      "Ingesting lines for Cl 0\n",
      "Ingesting lines for Cl 1\n",
      "Ingesting lines for Cl 2\n",
      "Ingesting lines for Cl 3\n",
      "Ingesting lines for Cl 4\n",
      "Ingesting lines for Ar 0\n",
      "Ingesting lines for Ar 1\n",
      "Ingesting lines for Ar 2\n",
      "Ingesting lines for Ar 3\n",
      "Ingesting lines for Ar 4\n",
      "Ingesting lines for K 0\n",
      "Ingesting lines for K 1\n",
      "Ingesting lines for K 2\n",
      "Ingesting lines for K 3\n",
      "Ingesting lines for K 4\n",
      "Ingesting lines for Ca 0\n",
      "Ingesting lines for Ca 1\n",
      "Ingesting lines for Ca 2\n",
      "Ingesting lines for Ca 3\n",
      "Ingesting lines for Ca 4\n",
      "Ingesting lines for Ca 5\n",
      "Ingesting lines for Ca 6\n",
      "Ingesting lines for Ca 7\n",
      "Ingesting lines for Ca 8\n",
      "Ingesting lines for Sc 0\n",
      "Ingesting lines for Sc 1\n",
      "Ingesting lines for Sc 2\n",
      "Ingesting lines for Sc 3\n",
      "Ingesting lines for Sc 4\n",
      "Ingesting lines for Sc 5\n",
      "Ingesting lines for Sc 6\n",
      "Ingesting lines for Sc 7\n",
      "Ingesting lines for Sc 8\n",
      "Ingesting lines for Ti 0\n",
      "Ingesting lines for Ti 1\n",
      "Ingesting lines for Ti 2\n",
      "Ingesting lines for Ti 3\n",
      "Ingesting lines for Ti 4\n",
      "Ingesting lines for Ti 5\n",
      "Ingesting lines for Ti 6\n",
      "Ingesting lines for Ti 7\n",
      "Ingesting lines for Ti 8\n",
      "Ingesting lines for V 0\n",
      "Ingesting lines for V 1\n",
      "Ingesting lines for V 2\n",
      "Ingesting lines for V 3\n",
      "Ingesting lines for V 4\n",
      "Ingesting lines for V 5\n",
      "Ingesting lines for V 6\n",
      "Ingesting lines for V 7\n",
      "Ingesting lines for V 8\n",
      "Ingesting lines for Cr 0\n",
      "Ingesting lines for Cr 1\n",
      "Ingesting lines for Cr 2\n",
      "Ingesting lines for Cr 3\n",
      "Ingesting lines for Cr 4\n",
      "Ingesting lines for Cr 5\n",
      "Ingesting lines for Cr 6\n",
      "Ingesting lines for Cr 7\n",
      "Ingesting lines for Cr 8\n",
      "Ingesting lines for Mn 0\n",
      "Ingesting lines for Mn 1\n",
      "Ingesting lines for Mn 2\n",
      "Ingesting lines for Mn 3\n",
      "Ingesting lines for Mn 4\n",
      "Ingesting lines for Mn 5\n",
      "Ingesting lines for Mn 6\n",
      "Ingesting lines for Mn 7\n",
      "Ingesting lines for Mn 8\n",
      "Ingesting lines for Fe 0\n",
      "Ingesting lines for Fe 1\n",
      "Ingesting lines for Fe 2\n",
      "Ingesting lines for Fe 3\n",
      "Ingesting lines for Fe 4\n",
      "Ingesting lines for Fe 5\n",
      "Ingesting lines for Fe 6\n",
      "Ingesting lines for Fe 7\n",
      "Ingesting lines for Fe 8\n",
      "Ingesting lines for Co 0\n",
      "Ingesting lines for Co 1\n",
      "Ingesting lines for Co 2\n",
      "Ingesting lines for Co 3\n",
      "Ingesting lines for Co 4\n",
      "Ingesting lines for Co 5\n",
      "Ingesting lines for Co 6\n",
      "Ingesting lines for Co 7\n",
      "Ingesting lines for Co 8\n",
      "Ingesting lines for Ni 0\n",
      "Ingesting lines for Ni 1\n",
      "Ingesting lines for Ni 2\n",
      "Ingesting lines for Ni 3\n",
      "Ingesting lines for Ni 4\n",
      "Ingesting lines for Ni 5\n",
      "Ingesting lines for Ni 6\n",
      "Ingesting lines for Ni 7\n",
      "Ingesting lines for Ni 8\n",
      "Ingesting lines for Cu 0\n",
      "Ingesting lines for Cu 1\n",
      "Ingesting lines for Zn 0\n",
      "Ingesting lines for Zn 1\n",
      "Ingesting lines for Zn 2\n"
     ]
    }
   ],
   "source": [
    "gfall_ingester = GFALLIngester(session, gfall_fname, ions='H-Zn')\n",
    "gfall_ingester.ingest(levels=True, lines=True)\n",
    "session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ingesting chianti levels and lines for H and He"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingesting levels from chianti_v8.0.6\n",
      "Ingesting levels for H 0\n",
      "Ingesting levels for He 0\n",
      "Ingesting levels for He 1\n",
      "Ingesting lines from chianti_v8.0.6\n",
      "Ingesting lines for H 0\n",
      "Ingesting lines for He 0\n",
      "Ingesting lines for He 1\n"
     ]
    }
   ],
   "source": [
    "chianti_ingester = ChiantiIngester(session, ions='h-he')\n",
    "chianti_ingester.ingest(levels=True, lines=True, collisions=False)\n",
    "session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ingesting Zeta data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "zeta_ingester = KnoxLongZetaIngester(session, zeta_fname)\n",
    "zeta_ingester.ingest()\n",
    "session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a tardis readable HDFStore\n",
    "\n",
    "As we did in the Quickstart, we first create an `AtomData` instance. For this database we choose kurucz as the primary `DataSource` with only hydrogen and helium coming from chianti. We also specify `chianti_short_name` which contains the version of the chianti database that was ingested."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ad = AtomData(\n",
    "        session,\n",
    "        selected_atoms='H-Zn',\n",
    "        chianti_ions=\"H; He\",\n",
    "        chianti_short_name='chianti_v8.0.6'\n",
    "        )\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Writing the output\n",
    "\n",
    "The database we want to create contains all data, except for the collision data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/media/data/projects/tardis/carsus/carsus/io/output/tardis_.py:562: RuntimeWarning: divide by zero encountered in log10\n",
      "  lines['loggf'] = np.log10(lines['gf'])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Signing AtomData: \n",
      "MD5: 3c7174aa939d1c9dac4e41afd7168796\n",
      "UUID1: 4f8355067e6a11e78bcb507b9d2c8db1\n"
     ]
    }
   ],
   "source": [
    "ad.to_hdf(\n",
    "        storename,\n",
    "        store_atom_masses=True,\n",
    "        store_ionization_energies=True,\n",
    "        store_levels=True,\n",
    "        store_lines=True,\n",
    "        store_macro_atom=True,\n",
    "        store_collisions=False,\n",
    "        store_zeta_data=True\n",
    "        )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparison to old kurucz: 7 lines missing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are done! Now you can use the created HDFStore to run TARDIS simulations."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
